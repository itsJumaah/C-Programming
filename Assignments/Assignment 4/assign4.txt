assign4.c
#include<stdio.h>
#include<stdlib.h>
#include<strings.h>
#include "assign4.h"
int main() {
	int i, k;
	char input[100];
	char command[10], filename[50];
	fdir = fopen("dir.dat","r");
	if(fdir == NULL) {
		printf("ERROR: cannot open dir.dat\n");
	}
	ffat = fopen("fat.dat","r");
	if(ffat == NULL) {
		printf("ERROR: cannot open fat.dat\n");
	}	
	read_fat();
	read_dir();
	for(;;) {
		printf(":");
		gets(input);
		sscanf(input,"%s %s %d",command, filename, &k);
		if(strcmp(command,"sectors") == 0) { 
			if(does_file_exist_in_dir(filename) == -1) {
				printf("File does not exist\n");
			}else { 
				for(i = 0; i < 30; i++) {
					if(strcmp(dir[i],filename) == 0) {
						print_sector_chain(fsect[i]);
						break;
					}
				}
			}
		}
		if(strcmp(command,"delete") == 0) {
			if(does_file_exist_in_dir(filename) == -1) {
				printf("File does not exist\n");
			}else {
				for(i = 0; i < 30; i++) {
					if(strcmp(dir[i],filename) == 0) {
						deallocate_sectors(fsect[i]);
						delete_file_from_dir(i);
						break;
					}
				}
			}
			save_fat();
			save_dir();
		}
		if(strcmp(command,"add") == 0) {
			if(dircnt >= 30) {
					printf("Directory is full\n");
			}else {
				if(k > free_sectors()) {
					printf("Not enough free sectors\n");
				}else {
					if(does_file_exist_in_dir(filename) != -1) {
						printf("File already exists \n");
					}else {
						add_file_to_dir(filename, first_free_sector());
						allocate_sectors(first_free_sector(), k);
						save_dir();
						save_fat();
					}
				}
			}
		}
		if(strcmp(command,"print") == 0) {
			print_fat();
		}
		if(strcmp(command,"dir") == 0) {
			for(i = 0; i < dircnt; i++) {
				printf("%s %d\n",dir[i], fsect[i]);
			}
		}
		if(strcmp(command,"quit") == 0) {
			system("cls");
			fclose(ffat);
			fclose(fdir);
			exit(69);
		}
	}
}

fat.c
#include<stdio.h>
#include<stdlib.h>
#include<strings.h>
#include "assign4.h"
void read_fat(void) {
	char line[120];
	int i = 0;
	while(fgets(line, sizeof line ,ffat)!=NULL) {
		sscanf(line,"%d", &fat[i]);
		i++;
	}
}
void print_fat() {
	int i = 0;
	for(i; i < 32; i++) {
		printf("%d\n",fat[i]);
	}
}
void save_fat(void) { 
	int i;
	fclose(ffat);	
	ffat = fopen("fat.dat","w+");
	if(ffat == NULL) {
		printf("ERROR: cannot open fat.dat\n");
	}
	for(i = 0; i < 32; i++) {
		fprintf(ffat,"%d\n",fat[i]);
	}
	fclose(ffat);
	ffat = fopen("fat.dat","r");
	if(ffat == NULL) {
		printf("ERROR: cannot open fat.dat\n");
	}
}
int free_sectors(void) { 
	int i,j,fatcount=0;
	for(i = 0, j = 0; i < 32; i++){
		if(fat[i] == 1) {
			fatcount++;
			fatsect[j] = i;
			j++;
		}
	}	
	return fatcount;	
}
int first_free_sector(void) {   
	int i;
	for(i = 0;i < 32;i++) {
		if(fat[i] == 1){ return i; break;}
	}
}
void allocate_sectors(int start_sector, int n) { 
	int i = 0,j = 0;
	if(n > (free_sectors())) {
		printf("Not enough free sectors\n");
	}else{ 
		if(dircnt >= 30 ) {
			printf("Directory is full\n");
		}else{
			for(i = 0; i < (n - 1); i++) {
				fat[start_sector] = fatsect[i + 1];
				start_sector = fatsect[i + 1];
			}
		}
	}
	fat[fatsect[i]] = 0;
	save_fat();
}
void deallocate_sectors(int start_sector) { 
	int nextsect, i = 0;
	for(i = 0; i < 30; i++) {
			nextsect = fat[start_sector];
			fat[start_sector] = 1;
			start_sector = nextsect;
			if(fat[start_sector] == 0) {
				fat[start_sector] = 1;
				break;
			}
	}
	save_fat();
}
void print_sector_chain(int start_sector) { 
	int j = start_sector;
	for(;;) {
		printf("%d ",j);
		j = fat[j];
		if(fat[j] == 0) {
			printf("%d\n", j);
			break;
		}
	}
}

dir.c
#include<stdio.h>
#include<stdlib.h>
#include<strings.h>
#include "assign4.h"
char line[120], linex[120];
void read_dir(void) {
	int i = 0;
	while(fgets(line,sizeof line,fdir)!=NULL) {
		sscanf(line,"%s %d",dir[i], &fsect[i]);
	
		i++;
	}
	dircnt = i;
	save_dir();
}

void save_dir(void) {
	int i = 0;
	fclose(fdir);
	fdir = fopen("dir.dat","w+");
	if(fdir == NULL) {
		printf("ERROR: cannot open dir.dat\n");
	}
	for(i = 0; i < dircnt; i++) {
		fprintf(fdir,"%s %d\n",dir[i],fsect[i]);
	}
	fclose(fdir);
	fdir = fopen("dir.dat","r");
	if(fdir == NULL) {
		printf("ERROR: cannot open dir.dat\n");
	}
}

void print_dir(void) {
	int i = 0;
	for(i; i < dircnt; i++) {
		printf("%s\n",dir[i]);
	}
}

int does_file_exist_in_dir(char *file) {
	int i=0, j = 0,temp=0;
	while(i < (dircnt)) {
		if(strcmp(dir[i],file) == 0) {
			temp++;
			break;
		}
		i++;
	}
	if(temp==1) {
			return fsect[i]; 
		}else{
			return -1;
		}
}


void add_file_to_dir(char *file, int start_sector) {
		if(does_file_exist_in_dir(file) != -1) {
			printf("File already exists\n");
		}else { 
			strcpy(dir[dircnt],file);
			fsect[dircnt] = start_sector;
			dircnt++;
			}
	save_dir();
}

void delete_file_from_dir(int position) {
	int i = 0, j = 1;
	for(i = 0; i < dircnt; i++) {
		strcpy(dir[position], dir[position + 1]);
		fsect[position] = fsect[position + 1];
		position++;
		j++;
		
	}
	dircnt --;
	save_dir();
}

assign4.h
#include <stdio.h>
void read_dir(void);												
void save_dir(void);												
void print_dir(void);											
int  does_file_exist_in_dir(char *file);					
void add_file_to_dir(char *file, int start_sector);	
void delete_file_from_dir(int position);					
void read_fat(void);												
void save_fat(void);												
int  free_sectors(void);										
int  first_free_sector(void);									
void allocate_sectors(int start_sector, int n);			
void deallocate_sectors(int start_sector);				
void print_sector_chain(int start_sector);			
void print_fat();

FILE *ffat;
FILE *fdir;
int fat[32];
char dir[30][30];
int dircnt;
int fsect[32];
int fatsect[32];

makefile
assign4.exe : assign4.o dir.o fat.o
	gcc -o assign4.exe assign4.o dir.o fat.o

assign4.o : assign4.c
	gcc -c assign4.c
dir.o : dir.c assign4.h
	gcc -c dir.c
fat.o : fat.c assign4.h
	gcc -c fat.c
